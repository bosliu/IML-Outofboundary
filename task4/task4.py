# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10z_3uvYn11wiPZ8KmgPxosCaO5VgAH0u
"""

import pandas as pd
import numpy as np
import os
import torch
import torch.nn as nn
import torch.nn.functional as F

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/task4
os.getcwd()

class Data:
    def __init__(self, dpath):
        self.pfeatures = pd.read_csv(os.path.join(dpath, 'pretrain_features.csv')).to_numpy()[:, 2:]
        self.plabels = pd.read_csv(os.path.join(dpath, 'pretrain_labels.csv')).to_numpy()[:, 2:]
        self.tfeatures = pd.read_csv(os.path.join(dpath, 'train_features.csv')).to_numpy()[:, 2:]
        self.tlabels = pd.read_csv(os.path.join(dpath, 'train_labels.csv')).to_numpy()[:, 2:]
        self.testfeatures = pd.read_csv(os.path.join(dpath, 'test_features.csv')).to_numpy()[:, 2:]

path = os.getcwd()
dpath = os.path.join(path, '')
data = Data(dpath)

class AutoEncoder(nn.Module):
  def __init__(self):
      self.Encoded_dim = 128,
      super().__init__()
      self.encoder = nn.Sequential(
          nn.Linear(in_features=1000, out_features=512),
          nn.PReLU(),
          nn.Linear(in_features=512, out_features=256),
          nn.PReLU(),
          nn.Linear(in_features=256, out_features=self.Encoded_dim),
          # nn.PReLU(),
      )
      self.decoder = nn.Sequential(
          nn.Linear(in_features=self.Encoded_dim, out_features=256),
          nn.PReLU(),
          nn.Linear(in_features=256, out_features=512),
          nn.PReLU(),
          nn.Linear(in_features=512, out_features=1000),
      )
  
  def forward(self, x):
    enc = self.encoder(x)
    return self.decoder(enc), enc

class MoleculeDataSet(torch.utils.data.Dataset):
  def __init__(self, Data ):

def train():
  pass